### 1. 소프트웨어 공학에 대해서 
## 공학이란?
수학과 자연과학을 기초로 + 인문, 사회과학 지식을 이용해서공동의 안전, 건설 복지를 위해서 유용한 사물이나 혼경을 구축하는 것을 목적으로 하는 학문.공학의 영역은 넓고, 여러가지 분야로 세분화 되어 있다.

## 소프트웨어 공학?
유용한 사물이나 환경..소프트웨어를 구축하는 것을 목적으로 하는 학문. 
소프트웨어의 개발, 운용, 유지보수 및 폐기에 대한 체계적인 접근방법
즉, 소프트웨어를 어떻게 하면 더 잘 만들수 있을까? 를 체계적으로 정리해놓은 학문


## 소프트웨어 개발 생명주기 모델

Software Development Life Cycle Model

소프트웨어를 어떻게 개발할 것인가에 대한 전체적인 흐름

주먹구구식, 폭포수, 프로토타이핑, 나선형


#폭포수 모델(5단계)

Requirment 요구사항을 분석/정리함.
어떻게 구성되고 어떻게 쓰여질 것인가, 구조를 설계
골격을 세움

Design 
실제적으로 평면도랑 설계도를 그림.architecture

Implementation
만듬

Verification
검증. 요구사항에 맞게 구현을 했는지

maintenance
유지보수 


문제점 : 도중에 수정이 불가능. 앞 단계가 진행히 되어야 그 다음 단계가 진행됨. 돌아갈 길이..없다.


# 프로토타이핑 모델(3단계)

폭포수 단계에서 각 단계별로 되돌아갈 수 있게 나타난 방법

요구분석 : 프로토타입 설계, 프로토타입 개발, 프로토타입 평가
구현
인수 및 설치

문제점:계속 추가사항이 늘어날 수 있음...사용자의 단순변심이 !!!
한정된 기간동안 프로토타입에만 집중하게되면 실제 완제품에서는 부실공사의 위험이 큼.
프로토타입을 본 사용자의 요구사항도 점점 늘어남
그걸 커뮤니케이션 하는 시간도 늘어남


# 나선형 모델(5단계)

한번 만들 때 완제품을 만들자

각각 기능별로 아래 다섯가지 를 반복.
프로토 타입을 만들지 않음

고객과의 의사소통
계획및 정의
위험분석
구축
고객평가

커뮤니케이션 비용이 제일 클 수 있음
결과물이 생각보다 이상할 수 있음 => 전체를 한번에 그려서 만드는게 아님

가장 많이 보는 모델은....주먹구구일 수도 있음..;;;

이 뿐만 아니라 사용자 요구, 목적에 따라서 다양한 형태가 있음



## 소프트웨어 개발 방법론

 소프트웨어 하나가 탄생하기까지의 긴 흐름을 두고
각각 세분화된 것을 반복할 때 하면 좋은 효율적인 방법들
즉, 소프트웨어를 생산하는데 필요한 반복적인 과정들을 정리한 것

종류 : 구조적 프로그래밍, 객체지향, 고속 개발 방법론, 익스트림 프로그래밍(Agile), 스크럼(Agile), UP 

#Agile 방법론

깔끔하게 상황에 맞게 어떻게 적용하느냐의 문제

다른 고전적인 방법론과 구별되는 가장 큰 차이점은
less document oriented
문서를 통한 개발 방법이 아니라
코드 오리엔티드 실질적인 코딩을 통한 방법론

앞을 예측하며 개발을 하지않고
일정한 주기를 가지고 끊임없이 프로토타입을 만들어내며
그때그때 필요한 요구를 더하고 수정하여 
하나의 커다란 소프트웨어를 개발해 나가는 Adaptive style

특정 개발 방법론을 가리키는 말은 아니고
개발 과정을 애자일(기민한, 좋은)하게 빠르고 낭비없게 만드는 것
빠르고 효율적으로 만들어내는 모든 것

여러가지 모델이 있을 수 있고 다양한 방법론 전체를 일컫는 말

++기술적 부채가 많은 회사들이 많음.
전체를 다 뒤집어 개선하지 못하는 문제를 고치지 않으면
유저가 넘처날 때 서버가 다운될까봐 ...밤샘작업을 해야된다던가
계속 유지보수만 하는 것도 엄청난 작업

초기 만들때 할 수 있는 사람이 예전 기술로 만들어버리면 뒤집어엎기도 힘들고 계속 유지보수만 하게됨


# UML
통합 모델링 언어
Unified Modeling Language

표준화된 범용 모델링 언어 (프로그램으로는 리스트들이 연결되어잇는 형태로 나타남)

객체지향 소프트웨어의 집약
시스템을 개발할 때 산출물을 명세화, 시각화, 문서화할 때 사용

다이어그램만 그리는 게 아니라 어떤 방법론을 써서 언제까지 산출을 할 것인가
클래스, 변수까지 모두 작성

범용 언어


# TDD
테스트 주도 개발
Test-driven development
매우 짧은 개발 사이클을 반복하는 소프트웨어 개발 프로세스

코드품질을 개량해나가면서 계속해서 개발해 나가는 방식
퀄리티를 보장하고 제대로 동작하는지를 확인하는 코드를 또 따로 짬

계속 테스트~
RED(fall) -> GREEN(Pass) -> REFACROR

결함을 점검하는 자동화된 테스트 케이스를 작성. 
만들어진 기능마다 다 작동이 잘 되는지 확인 => 되면 다음 기능을 만듬

케이스를 통과하기 위한 최소한 양의 코드를 생성

코드가 간결하게 잘 되었는지
새 코드를 표준에 맞도록 리팩토링

문제 : 실제로 하기는 너무 어려움
테스트 코드에서도 버그가 나옴..
그런데도 계속 해야함.. 일정 압박에 시달림.
처음 개발할 때부터 테스트 코드 감안을 해야한다.

장점은 기술적 부채를 탕감하는 방법이 될 수 있음


# PDD
계획 기반 개발

Plan - driven development
계획을 세우고 그 계획을 실천하는 데에 많은 시간과 노력을 할애하는 개발방법
고전적인 방법
문서 하나하나에 자세한 것들을 주욱 써놓고 이것을 기반으로 개발하는 방법


#형상관리

SW개발 및 유지보수 과정에서 발생하는 소스콛, 문서, 인터페이스 등 각종 결과물에 대해 형상을 만들고, 이들 형상에 대한 변경을 체계적으로 관리, 제어하기 위한 활동. Git을 활용한 버전 관리도 형상 관리의 일부이다. 일반적인 소프트웨어 소스 코드만의 형상을 관리하는 것

SVN(subversion), Git, Mercurial, CVS
++왜 쓰는가?

좋은 목적들이 많지만 일단은 협업에서 '책임을 확실하게 지게 하기 위해서'
커밋멘트의 중요성 : 누가누가 시켜서 이런 목적으로 수정했습니다 



### 2. 프로그래밍 언어

++ 추천사이트 Stackoverflow
인기많은 언어 순위
Android vs iOS 직업 비율
연봉 순위 등등 확인 가능

언어의 역사

포트란, 알골
B언어, MS 베이직
비주얼 베이직
자바스크립트 - 자바와 완전히 다름
C언어..b언어 다음이라서.. C언어..ㄷㄷ
오브젝트 씨
오크
루비
파이썬
펄

자바와 C의 차이

여타 언어에는 없는 것들.. 포인터 같은 것
컴퓨터 구조를 정확하게 알고 표현하기 위한 키워드가 모두 C에 있음

++ 자바와 C의 비교 찾아보기


## 프로그래밍 언어의 종류

고급언어에서 저급언어로 변환되는 과정에 따른 분류

고급언어 - 사람이 쓰는 언어
저급언어 - 기계어


# 컴파일 언어 종류와 특징
C, C++, Go

사용자가 사용할 때프로그램이 오류가 있으면 

제작자는 잘못된 부분을 수정해서 다시 보내는데

이를 컴퓨터가 실행 가능한 0,1 코드로 다 번역을 해서 배포함 -> 이게 실행파일 .exe

실행 파일을 사람들이 다운로드 하면 따로 컴파일없이 설치만 하면 됨.

컴파일 언어의 장점 : 실행속도가 빠르다. 이미 번역되어 있으니까

한번 배포하면 수정하기가 어려움

한줄의 오류를 위해 전체를 다시 변환하고 다시 작성 후 번역해야되는 오류가 있음


# 인터프리터 언어
BASIC, JaveScript, Python, Ruby

한편, 번역해주지는 않고 받은 사용자가 직접 번역하는 컴파일을 가지고 있어서
실시간으로 번역/실행하는 체제를 가진 게 인터프리터 언어

-> 소스 노출의 위험, 시간이 오래 걸림, 결과를 알 수 없다.
원서를 번역된 걸 안보고 사서 보는 것과 같은...


ex) 날씨를 알려주는 프로그램

위치와 날씨를 잘못 알려주는 오류가 생겼을 때.

컴파일 언어는 다시 다운받고 설치하기까지 오래걸린다.

이에 반해 인터프리터 언어는 잘못된 곳 코드 한줄만 보내면

어차피 실시간으로 번역하기 때문에 복잡한 설치과정 없이도 금방 바뀜.


두개의 장단점을 합친다면?

시스템마다 알아듣는 게 달라서 따로 만들어서 배포를 해줘야 함..

만능 통역사가 있으면 어떨까? => 바이트 코드 언어


# 바이트 코드 언어
Java, C#

-> 고급 언어와 저급언어 사이에 시스템마다 실행할수 있는 중간 언어.
이 중간 언어가 컴파일까지는 해줌
중간 언어도 된 상태로 배포가 됨. 각각 컴퓨터는 이 중간 언어를 해석하여 실행 

JVM이 알아들을 수 있는 언어여야 함.

그렇게 만들어진 언어가 중간 언어;;;바이트 코드
어느 컴퓨터에서나 실행할 수 있음
문제- OS별로 업데이트를 해야함

하나의 프로그램으로 올라와 있고 가상머신으로 만들어서 돌림


## 프로그래밍 패러다임

#객체지향 프로그래밍

프로그램 패러다임 중 하나
컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 '객체'들의 모임으로 파악하여, 객체간의 상호작용으로 프로그램의 동작을 구현하고자 하는 것

객체지향의 배경 : 
컴퓨터가 사용되는 여러가지 목적들, 처리되어야할 일들은 사람 세상의 일과 비슷해서 반복되는 것들도 많고 약간만 수정해서 적용하면 되는 일들도 많은데,
매번 명령어를 주욱 나열하기만 하면 매번 반복되는 일을 해결하기가 어렵다.

프로그램이 작동하는 그 세상도 인간세상처럼 만들어보면 어떨까
프로세스 내 세상. 메모리에서도 똑같이 객체별로 주고받으면서 실행될 수 있도록

객체지향 실질적인 형태 : 클래스를 통해 객체를 만들어냄

(클래스의 객체화)

클래스 : 어떤 물건이나 행위, 형상, 모습 을 설명서처럼 써둠. 
이대로 실행하면 생기는게 객체

ex) 사람: 이름 나이 성별 먹는다 잔다.. 이런 특징 => 코드로 써둠
설명서랑 똑같은 '사람'을 만듬 ' 객체'
클래스의 설명을 읽고 메모리에 형상화 시킨 게 객체
메모리 안에는 이런 객체가 무궁무진하고 서로 소통하기도 함


#객체

오브젝트(물체, 물건, 목적)
의식과 행위를 가지는 형체
모르는 미지의 형체
정의와 속성을 가지고 있음


#클래스 - class

객체가 가질 수 있는 속성과 행위를 정의하는 틀
(템플릿, 설계도)

개발자는 이 클래스 코드를 실현했을 때 실제로 어떻지 상상을 해야함

클래스 모양대로 작성


ex) 클래스 코드가 오브젝트로 표현되는 것 예시

1) 자동차 클래스 (설계도) -> 메모리에서 움직이는 것, 살아 움직이는 객체의 생산

메모리 공간 허용만 되면 계속해서 뽑아낼 수 있음


자동차의 특징들 (클래스) 

속성(변수) - 색상, 연료 형식
기능(함수) -전진(전진기어 움직이며 연료를..), 후진 (후진기어를 사용하며 엔진에..)
실행(객체)

휘발유, 파랑색 속성
전진후진 기능

등등이 있는 자동차 나옴 

클래스에 있는 게 실행되고 클래스에서 객체에 올라감.

2) Music Player

속성 : 음악파일, 음량 .. 
기능 : 재생 정지

3) 디아블로 캐릭터 선택 (각각 캐릭터 자체가 클래스)
바바리안 선택 후 => 캐릭터의 이름을 주고, 생성 => 메모리 마을에 실체가 되서 만들어짐.(객체)

객체의 특성은 어떤 클래스에서 생성되었느냐에 따라 다름
마을에는 같은 바바리안 클래스에서 생성되었지만 각자 다른 바바리안이 존재함.

스킬이 함수 실행


## 프로그래밍 용어

#개발자는 누구인가?

프로그램을 생성하기위해 관여되는 모든 사람들
프로그래머 => 실생활에서 사용되는 개발자 의미. 코드를 짜는 엔지니어.
디자이너, 기획자 => 사실 개발자에 포함됨


#Server / Client

서버 -> 데이터제공 -> 클라이언트
서로 상대적인 역할을 할 수 있음. 서버가 클라이언트 / 클라이언트가 서버


#프론트 엔드- 백엔드란?

프로그램 Back 계산을 하는 곳, 안보이는 부분. 저장을 하고 처리를 함.
<=>Front . 사람과 직접 인터페이스 하는 부분. 보이는데서 일어나는 것. 화면을 구성하는 것. 명령을 전달

-------> 두개가 합쳐져서 사용자, 외부로 보여짐

#서버
Back-end, Front-end(API) -> 클라이언트

++ 관념적이고 상대적인 용어일수록 정확한 상황에서 써야


#Thread 작업 흐름의 단위

프로세스 내에서 작업이 실행되는 흐름의 단위. 시간순

Process
Thread #1
Thread #2
순으로 실행


#멀티 스레드

Multi Thread - 다중 스레드


#멀티 스레드 VS 멀티 태스크

프로세스 안에서 하나의 단위..사실은 비교 불가일수도.

ex) 멀티 스레드 : 하나의 게임 내에서 작업 스케쥴 -> 배경음악, 멘트, 각각이 연결되서 이루어지는 어떤 기능, 동작 등

ex) 멀티 태스킹 : 음악을 들으면서 책을 읽는다. 하나의 뇌가 여러가지 일을 처리하는 것. 이야기하면서 밥을 먹는다.. 모호함. 순식간에 번갈아 가면서 실행

프로그램
애니메이션 스레드 - 읽어주기 스레드
순식간에 번갈아가면서..


++내 생각

*두 개가 거의 같은 개념인데 주체와 그 의도에 따라 다른 듯. 
스레드는 개발자 입장에서 어떤 프로세스 내 작업들이 서로 어떻게 동시에 실행되(는것처럼 보이도록 하)는지 타이밍들을 설계하는 개념도 포함

태스킹은 이런 스레드를 하도록 예상되는 사용자가 주체임. 어떤 작업을 하고 싶은지 스스로 선택하고 실행함. 그래서 자신이 원하는 여러 일을 의도하고 계획하는 타이밍에 따라서 일을 할 수 있는 것을 의미.


#라이브러리
컴퓨터에 즉시 사용할 수 있도록 자기 테이프 내에 정리 기록한 정보 집단.(구글)

#API

Application Programming Interface
응용 소프트웨어 프로그래밍 접합부
응용 소프트웨어와 프레임 워크 사이의 중간매체(방법)

소프트웨어 간의 통신을 위해 메시지를 전달하는 방식 등이 결정된 것

ex) 날씨 앱을 만들기 위한 날씨 API
어떤 하나의 기능을 적어놓은 것
이 부분으로 접근을 하면 볼 수 있도록 적어놓은 것
정보를 가져갈 어떤 통로나 창구

++ 시스템 안의 API -> 프로그램

파일을 저장하려고 한다면!! 이 창구로 접수를 시켜주면 내가 처리해줄게

Open API는 제한적으로 제공하는 경우가 많음
이 창구를 줄테니까 이 창구를 통해서만 나에게 요청해

++ 서버 프로그램

서버 프로그램 API -> 클라이언트 프로그램


# Framework

구조적으로 고정된 부분을 재사용할 수 있도록 하고,
응용별 특정기능을 추가적인 사용자 작성 코드에 의해 선택적으로 구현 가능하도록 하는
포괄적인 추상 구조, 그리고 이를 지원하는 소프트웨어 플랫폼

공통적으로 마련된 어떤 플랫폼!이 있다
기반들.. 운영체제랑 비슷한 것

그 프레임워크에서만 사용 가능한 쓸 수 있는 기능들을 제공
가상의 구조 공간을 표현해주는 것

라이브러리는 하나의 프로세스를 실행하기위한 꾸러미 정도라면 하나의 세상을 표현
비유해보자면

프레임워크 - 국가, 정부
프레임워크의 하위 프레임 워크 - 정부부처

API 국가기관
라이브러리 - 직무전문가
프로그래밍 언어 - 국가 통용언어
레퍼런스 문서 - 국가 조직도 및 기능설명서

미리 다 만들어 놓은 것

라이브러리가 필요에 의해 운영을 하기위해 통용이 되는 것

기반시설을 이용하고 싶다면 레퍼런스 문서를 확인

여기서 무엇을 사용하고 어떤 게 있고 어떤클래스로 이루어져있다

이런내용이 다 적혀있음

**레퍼런스 문서 중요!

ex) 예시
코코아 터치 프레임워크 + 오브젝트 C

Cocoa Touch 라는 나라 모양에 내가 원하는 일을 할 수 있는 기업을 세우는 것
Cocoa Touch라는 나라에서는 Objective-C 또는 Swift로 소통 가능

안드로이드 프레임워크 + 자바

안드로이드 라는 나라 모양에 내가 원하는 일을 할 수 있는 기업을 세우는 것
안드로이드 라는 나라에서는 자바로 소통 가능

프레임워크는 추상적인 용어. 내가 원하는 것이 맞게 쓰이고 있는지 항상 확인


#디자인 패턴 (개발에서)

프로그램 개발에서 자주 나타나는 과제를 해결하기 위한 방법 중 하나

과거의 소프트웨어 개발 과정에서 발견된 설계의 노하우에 
이름을 붙여 이후에 재이용하기 좋은 형태로 묶어서 정리한 것

클래스 구성과 관계를 어떻게 만들어줘야 메무리 안에서 효율적으로 연산을 처리할 수 있겠는가

코드의 재사용도 포함: 이렇게 하니까 코드를 다음번에 쓰기가 용이하더라


# MVC (Model-View-Controller)
MVVM
Observer
Singleton
Prototype

M데이터관리
C중재자
V화면표시 : 버튼, 텍스트뷰, 웹뷰

객체들만 생성할 클래스들을 모아보자
데이터만 관리할 클래스

사용자가 Save를 눌렀다 -> 중재자가 화면표시에서 데이터관리로 전달을 해줌. -> 데이터관리가 처리 -> 중재자가 다시 전달 해줌 -> 화면에 저장되었다고 표시!

이렇게 하니까 효율적으로 잘 처리하더라~ 
클래스들이 구조화되어 있는 방식


#Reference Document

레퍼런스 문서
API에 대해 서술해 놓은 문서, 설명들..

수시로 업데이트되므로 굳이 인쇄하진 않는 게 좋음. 백과사전 같은 것.


#IDE Integrated Development Enviroment

통합 개발 환경
소프트웨어 개발을 위한 소프트웨어
디자인을 위해서 도구를 제공
모든 기능이 다 들어있음


#SDK

Software Development Kit
소프트웨어 개발에 필요한 도구의 모음
IDE + Framework + Tools...
IDE 보다 더 큰 범위로 프레임워크부터 모든 게 다 들어있음


#웹 프로그래머
보이는 부분(안드로이드가 주로 이 부분) 안보이는 로직 DB개발자 = 다할 수 있으면 Full Stack (웹에서)
HTML CSS 자바 스크립트 ASP JSP PHP 등

전부를 제대로 할 수 있는 사람(Full steak)은 극히 드물다. 

웹퍼블리셔-PSD-웹 디자이너 CSS, HTML -> 개발

사용성 효율성 직관성 기획 모두 중요.
